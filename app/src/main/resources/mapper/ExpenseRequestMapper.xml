<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tw.mapper.ExpenseRequestMapper">
    <resultMap id="resultExpenseRequest" type="com.tw.domain.ExpenseRequest">
        <id property="id" column="id" />
        <result property="amount" column="amount" />
        <result property="createdAt" column="createdAt" />
        <association property="approvement" javaType="com.tw.domain.Approvement">
            <id property="id" column="approvementId" />
            <result property="userId" column="approvementUserId" />
            <result property="createdAt" column="approvementCreatedAt" />
            <association property="payment" javaType="com.tw.domain.Payment">
                <id property="id" column="paymentId" />
                <result property="createdAt" column="paymentCreatedAt" />
            </association>
        </association>
        <collection property="items" ofType="com.tw.domain.ExpenseRequestItem">
            <id property="id" column="itemId" />
            <result property="amount" column="itemAmount" />
            <result property="description" column="itemDescription" />
            <result property="categoryId" column="itemCategoryId" />
            <association property="recipe" javaType="com.tw.domain.Recipe">
                <id property="id" column="recipeId" />
                <result property="description" column="recipeDescription" />
            </association>
        </collection>
    </resultMap>

    <insert id="createExpenseRequest"  keyProperty="expenseRequest.id">
        INSERT INTO expenseRequests (amount, userId, createdAt) values (#{expenseRequest.amount}, #{userId}, #{expenseRequest.createdAt})
    </insert>

    <select id="getExpenseRequestById" resultMap="resultExpenseRequest">
        SELECT a.id as id, a.amount as amount,
        b.id as itemId, b.amount as itemAmount, b.description as itemDescription, b.categoryId as itemCategoryId,
        c.id as recipeId, c.description as recipeDescription,
        d.id as approvementId, d.userId as approvementUserId, d.createdAt as approvementCreatedAt,
        e.id as paymentId, e.createdAt as paymentCreatedAt
        from expenseRequests a
        left join expenseRequestItems b on a.id = b.expenseRequestId
        left join recipes c on b.id = c.expenseRequestItemId
        left join approvements d on a.id = d.expenseRequestId
        left join payments e on e.approvementId = d.id;
    </select>
</mapper>